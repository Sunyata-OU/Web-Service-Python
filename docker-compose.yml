version: "3"
services:
  fastapi:
    build:
      context: .
      dockerfile: docker/fastapi-service/DockerFile
      ssh:
        - default
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}
        SERVICE_PORT: ${SERVICE_PORT}
        WORKERS_COUNT: ${WORKERS_COUNT}
    env_file:
      - .env
    image: fastapi-service
    ports:
      - "${SERVICE_PORT}:${SERVICE_PORT}"
    network_mode: host
    depends_on:
      - db
      - minio
      - redis_db
    volumes:
      - ./data/web/logs:/var/log/webapp
  redis_db:
    image: redis:${REDIS_VERSION}
    network_mode: host
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}

  minio:
    image: minio/minio:${MINIO_VERSION}
    network_mode: host
    ports:
      - ${S3_PORT}:${S3_PORT}
      - ${MINIO_SERVER_PORT}:${MINIO_SERVER_PORT}
    volumes:
      - ./data/minio:/data
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_ACCESS_KEY}
    command: server --console-address ":${MINIO_SERVER_PORT}" /data

  db:
    image: postgres:${POSTGRES_VERSION}
    volumes:
      - ./data/db:/var/lib/postgresql/data
    network_mode: host
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  celery:
    image: fastapi-service
    command: celery -A src.celery worker --loglevel=info
    depends_on:
      - redis_db
    network_mode: host

  nginx:
    image: nginx:alpine
    ports:
      - mode: host
        protocol: tcp
        published: 80
        target: 80
      - mode: host
        protocol: tcp
        published: 443
        target: 443
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
