[project]
name = "web-service-python"
version = "0.1.0"
description = "A template for a full service web service."
authors = [
    {name = "Tony", email = "me@tonybenoy.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]

dependencies = [
    # Web Framework
    "fastapi>=0.115.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    
    # Database
    "sqlalchemy>=2.0.36",
    "alembic>=1.14.0",
    "asyncpg>=0.30.0",        # Better async PostgreSQL driver
    "psycopg2-binary>=2.9.10", # Keep for compatibility
    
    # Server
    "gunicorn>=23.0.0",
    "uvicorn[standard]>=0.32.0",
    
    # Utilities
    "python-dotenv>=1.0.1",
    "jinja2>=3.1.5",
    "python-multipart>=0.0.20",
    
    # S3/Storage
    "boto3>=1.35.0",
    
    # Background Tasks
    "celery>=5.4.0",
    "redis>=5.2.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",  # For form data
]

[project.optional-dependencies]
dev = [
    # Code Quality
    "ruff>=0.8.0",
    "pre-commit>=4.0.0",
    
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "httpx>=0.28.0",
    "freezegun>=1.5.0",
    
    # Type Checking
    "mypy>=1.13.0",
    "types-redis>=4.6.0",
    
    # Development Tools
    "jupyterlab>=4.3.0",
    "ipython>=8.30.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 120
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint]
# Enable the isort rules.
extend-select = ["I"]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true

[tool.mypy]
python_version = "3.10"
plugins = ["pydantic.mypy"]
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "boto3.*",
    "botocore.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = ["src/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["src/tests/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[dependency-groups]
dev = [
    "freezegun>=1.5.4",
    "httpx>=0.28.1",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pyyaml>=6.0.2",
    "ruff>=0.12.7",
]
